include_guard(GLOBAL)
get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
if (CXX IN_LIST languages)
  if(NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 17)
  endif()
  if(NOT DEFINED CMAKE_CXX_EXTENSIONS)
    set(CMAKE_CXX_EXTENSIONS OFF)
  endif()
endif()

#FIXME
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE Debug CACHE STRING "Build Type" FORCE)
endif()

if (CXX IN_LIST languages)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-weak-vtables -Wno-disabled-macro-expansion -Wno-reserved-id-macro -Wno-global-constructors -Wno-exit-time-destructors -Wno-double-promotion -Wno-padded -Wno-gnu-zero-variadic-macro-arguments -ferror-limit=1")
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wshadow -Wnon-virtual-dtor -Wpedantic -fmax-errors=1")
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /permissive- /MP /utf-8 /W4 /wd4514 /wd4571")
  endif()
endif()

#fix compiler bug
foreach(lang IN LISTS languages)
  if(CMAKE_${lang}_COMPILER_ID STREQUAL "GNU")
    if (CMAKE_${lang}_COMPILER_VERSION VERSION_EQUAL 8.1 OR CMAKE_${lang}_COMPILER_VERSION VERSION_EQUAL 8.0)
      list(APPEND CMAKE_${lang}_FLAGS -fno-tree-vrp -fno-inline -fno-tree-fre)
    endif()
  endif()
endforeach()
