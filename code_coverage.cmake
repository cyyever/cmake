include_guard(GLOBAL)
include(${CMAKE_CURRENT_LIST_DIR}/build_type.cmake)

add_custom_build_type(CODE_COVERAGE)

set(ENABLE_GNU_CODE_COVERAGE FALSE)
set(ENABLE_LLVM_CODE_COVERAGE FALSE)

set(CMAKE_C_FLAGS_CODE_COVERAGE "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_CODE_COVERAGE "${CMAKE_CXX_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_EXE_LINKER_FLAGS_CODE_COVERAGE "${CMAKE_EXE_LINKER_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_SHARED_LINKER_FLAGS_CODE_COVERAGE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_STATIC_LINKER_FLAGS_CODE_COVERAGE "${CMAKE_STATIC_LINKER_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_MODULE_LINKER_FLAGS_CODE_COVERAGE "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}" CACHE STRING "")

get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
if(CXX IN_LIST languages)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS_CODE_COVERAGE "${CMAKE_CXX_FLAGS_CODE_COVERAGE} -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "" FORCE)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS_CODE_COVERAGE "${CMAKE_CXX_FLAGS_CODE_COVERAGE} --coverage" CACHE STRING "" FORCE)
    add_link_options($<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CONFIG:CODE_COVERAGE>>:--coverage>)
  endif()
endif()

if(C IN_LIST languages)
  if(CMAKE_C_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_C_FLAGS_CODE_COVERAGE "${CMAKE_C_FLAGS_CODE_COVERAGE} -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "" FORCE)
  elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_C_FLAGS_CODE_COVERAGE "${CMAKE_C_FLAGS_CODE_COVERAGE} --coverage" CACHE STRING "" FORCE)
    add_link_options($<$<AND:$<COMPILE_LANGUAGE:C>,$<CONFIG:CODE_COVERAGE>>:--coverage>)
  endif()
endif()
